/*
  Slider
  ===========
  Creates an slide styling for Card and Imageslider, using the Flickity.js library.
*/
.o-slider {
  // Component Config
  $api: (
    selector: 'slider',
    margin-bottom: s(2),
    breakpoints: (
      one: false,
      two: 500px,
      three: 700px,
      four: 800px,
      five: 900px,
      six: 1000px,
    ),
    flickity: (
      nav: (
        background: rgba(0,0,0,0),
        color: rgba(c('white'),0.5),
        hover: rgba(c('white'),0.9)
      )
    )
  );

  // Build root selector
  $root: '.o-#{v($api,selector)}';

  // Base Style ----------------------------
  margin-bottom: v($api,margin-bottom);
  height: 100%;

  // Overwrites ----------------------------
  // Style Modification Flickity
  .flickity-prev-next-button,
  .flickity-prev-prev-button {
    background: v($api,flickity,nav,background);
    svg path {
      fill: v($api,flickity,nav,color);
    }

    &:hover {
      svg path {
        fill: v($api,flickity,nav,hover);
      }
    }
  }
  .flickity-page-dots {
    bottom: -25px;
  }

  // Childs --------------------------------

  // [root]__slide
  &__slide {
    width: 100%;
    &--auto {
      width: auto;
    }

    // Building Columns
    $list-length: length(v($api,breakpoints));

    @for $i from 1 through $list-length {
      $iterator: nth(v($api,breakpoints),$i);
      $key: nth($iterator,1);
      $value: nth($iterator,2);

      // Slide Sizes
      &--#{$i} {
        width: 100 / $i + 0%;
      }

      // If Breakpointsize is not `false`
      @if $value != false {
        // @media screen and (min-width: #{$value}) {
        @include eqr($root, (min-width: #{$value})) {
          // Colum Size
          @at-root %col-size-#{$i} {
            width: 100 / $i + 0%;
          }

          // Build Inner Classes
          @for $ii from $i through $list-length {
            &-r--#{$ii} {
              @extend %col-size-#{$i};
            }
          }
        }
      }
    }
  }
}
